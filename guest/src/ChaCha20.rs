
// #[cfg_attr(feature = "guest", no_std)]


pub struct ChaChaCipher {
    key: [u8; 32],
    nonce: [u8; 12],
    counter: u32,
    sigma: [u32; 4],
    params: [u32; 16],
    keystream: [u32; 64],
    byte_counter: usize,
}

impl ChaChaCipher {
    pub fn new(key: [u8; 32], counter: u32, nonce: [u8; 12]) -> ChaChaCipher {
        let sigma = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574];
        ChaChaCipher {
            key,
            nonce,
            counter,
            sigma,
            params: [
                sigma[0],
                sigma[1],
                sigma[2],
                sigma[3],
                ChaChaCipher::get32_32(key, 0),
                ChaChaCipher::get32_32(key, 4),
                ChaChaCipher::get32_32(key, 8),
                ChaChaCipher::get32_32(key, 12),
                ChaChaCipher::get32_32(key, 16),
                ChaChaCipher::get32_32(key, 20),
                ChaChaCipher::get32_32(key, 24),
                ChaChaCipher::get32_32(key, 28),
                counter,
                ChaChaCipher::get32_12(nonce, 0),
                ChaChaCipher::get32_12(nonce, 4),
                ChaChaCipher::get32_12(nonce, 8),
            ],
            keystream: [0; 64],
            byte_counter: 0,
        }
    }

    fn get32_12(data: [u8; 12], index: usize) -> u32 {
        (data[index] as u32 & 0xFF)
            | ((data[index + 1] as u32 & 0xFF) << 8)
            | ((data[index + 2] as u32 & 0xFF) << 16)
            | ((data[index + 3] as u32 & 0xFF) << 24)
    }

    fn get32_32(data: [u8; 32], index: usize) -> u32 {
        (data[index] as u32 & 0xFF)
            | ((data[index + 1] as u32 & 0xFF) << 8)
            | ((data[index + 2] as u32 & 0xFF) << 16)
            | ((data[index + 3] as u32 & 0xFF) << 24)
    }

    fn _rotl(x: u32, n: u32) -> u32 {
        ((x << n) | (x >> (32 - n)))
    }

    fn _quarterround(output: &mut [u32; 16], a: usize, b: usize, c: usize, d: usize) {
        output[a] = output[a].wrapping_add(output[b]);
        output[d] = ChaChaCipher::_rotl(output[d] ^ (output[a]), 16);
        output[c] = output[c].wrapping_add(output[d]);
        output[b] = ChaChaCipher::_rotl(output[b] ^ (output[c]), 12);
        output[a] = output[a].wrapping_add(output[b]);
        output[d] = ChaChaCipher::_rotl(output[d] ^ (output[a]), 8);
        output[c] = output[c].wrapping_add(output[d]);
        output[b] = ChaChaCipher::_rotl(output[b] ^ (output[c]), 7);

        output[a] >>= 0;
        output[b] >>= 0;
        output[c] >>= 0;
        output[d] >>= 0;
    }

    fn _chacha(params: [u32; 16], keystream_: [u32; 64]) -> [u32; 64] {
        let mut mix = [0; 16];
        let mut b = 0;

        let mut keystream = [0; 64];
        for i in 0..64 {
            keystream[i] = keystream_[i];
        }

        // copy param array to mix //
        for i in 0..16 {
            mix[i] = params[i];
        }

        // Loop through rounds
        for _ in 0..10 {
            ChaChaCipher::_quarterround(&mut mix, 0, 4, 8, 12);
            ChaChaCipher::_quarterround(&mut mix, 1, 5, 9, 13);
            ChaChaCipher::_quarterround(&mut mix, 2, 6, 10, 14);
            ChaChaCipher::_quarterround(&mut mix, 3, 7, 11, 15);

            ChaChaCipher::_quarterround(&mut mix, 0, 5, 10, 15);
            ChaChaCipher::_quarterround(&mut mix, 1, 6, 11, 12);
            ChaChaCipher::_quarterround(&mut mix, 2, 7, 8, 13);
            ChaChaCipher::_quarterround(&mut mix, 3, 4, 9, 14);
        }

        for i in 0..16 {
            mix[i] = mix[i].wrapping_add(params[i]);
            keystream[b] = (mix[i] & 0xFF);
            keystream[b + 1] = ((mix[i] >> 8) & 0xFF);
            keystream[b + 2] = ((mix[i] >> 16) & 0xFF);
            keystream[b + 3] = ((mix[i] >> 24) & 0xFF);
            b += 4;
        }
        keystream
    }

    pub fn update1(self: &mut ChaChaCipher, data: [u8; 1]) -> [u8; 114] {
        let mut output = [0; 114];

        for i in 0..1 {
            if ((self.byte_counter == 0) | (self.byte_counter == 64)) {
                // generate new block //

                self.keystream = ChaChaCipher::_chacha(self.params, self.keystream);

                // counter increment //
                self.params[12] += 1;

                // reset internal counter //
                self.byte_counter = 0;

                // std::println(self.params[12])
            }

            output[i] = data[i] ^ (self.keystream[self.byte_counter] as u8);
            self.byte_counter += 1;
        }
        output
    }


    pub fn update(self: &mut ChaChaCipher, data: [u8; 114]) -> [u8; 114] {
        let mut output = [0; 114];

        for i in 0..114 {
            if ((self.byte_counter == 0) | (self.byte_counter == 64)) {
                // generate new block //

                self.keystream = ChaChaCipher::_chacha(self.params, self.keystream);

                // counter increment //
                self.params[12] += 1;

                // reset internal counter //
                self.byte_counter = 0;

                // std::println(self.params[12])
            }

            output[i] = data[i] ^ (self.keystream[self.byte_counter] as u8);
            self.byte_counter += 1;
        }
        output
    }
}

#[test]
fn test_ChaCha20_params() {
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f,
    ];

    let nonce = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00,
    ];

    let expected_params = [
        0x61707865, 0x3320646e, 0x79622d32, 0x6b206574, 0x03020100, 0x07060504, 0x0b0a0908,
        0x0f0e0d0c, 0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c, 0x00000001, 0x00000000,
        0x4a000000, 0x00000000,
    ];

    let chacha = ChaChaCipher::new(key, 1, nonce);

    for i in 0..16 {
        assert_eq!(chacha.params[i], expected_params[i]);
    }
}





#[test]
fn test_ChaCha20_plaintext() {
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f,
    ];

    let nonce = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00,
    ];

    let plaintext = [
        0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
        0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20,
        0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79,
        0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70,
        0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
        0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75,
        0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x2e,
    ];

    let expected_output = [
        0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69,
        0x81, 0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f,
        0xae, 0x0b, 0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd,
        0x62, 0xb3, 0x57, 0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35,
        0x9f, 0x08, 0x61, 0xd8, 0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e,
        0x08, 0x8a, 0x22, 0xb6, 0x5e, 0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c,
        0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36, 0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4,
        0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42, 0x87, 0x4d,
    ];

    let mut chacha = ChaChaCipher::new(key, 1, nonce);

    let output = chacha.update(plaintext);
    for i in 0..expected_output.len() {
        assert_eq!(output[i], expected_output[i]);
    }

    let mut decoder = ChaChaCipher::new(key, 1, nonce);

    let decrypted = decoder.update(output);
    // std::println(decrypted);
    for i in 0..expected_output.len() {
        assert_eq!(plaintext[i], decrypted[i]);
    }
}


// #[test]
// fn test_ChaCha20_large() {
//     let key = [
//         0x35, 0xb3, 0xed, 0x7e, 0x36, 0xf4, 0x74, 0x0d, 0xe4, 0xd1, 0x26, 0xac, 0xde, 0x37, 0xf9,
//         0x13, 0xad, 0x73, 0x83, 0x5e, 0x67, 0xa1, 0x00, 0xe2, 0xa7, 0xeb, 0x90, 0xd3, 0x3f, 0x50,
//         0xf2, 0x54,
//     ];

//     let nonce = [
//         0x8b, 0x54, 0x5c, 0x17, 0x25, 0x6d, 0xfe, 0xf8, 0xaf, 0xe6, 0x01, 0xdf,
//     ];

//     let expected_param = [
//         0x61707865, 0x3320646e, 0x79622d32, 0x6b206574, 0x7eedb335, 0x0d74f436, 0xac26d1e4,
//         0x13f937de, 0x5e8373ad, 0xe200a167, 0xd390eba7, 0x54f2503f, 0x00000000, 0x175c548b,
//         0xf8fe6d25, 0xdf01e6af,
//     ];

//     let mut chacha = ChaChaCipher::new(key, 0, nonce);
//     for i in 0..16 {
//         assert_eq!(chacha.params[i], expected_param[i]);
//     }

//     let plaintext = [
//         0x2e, 0x25, 0xd0, 0xf9, 0xf3, 0xac, 0x4d, 0xf3, 0xeb, 0x7b, 0xc9, 0xf2, 0xc6, 0x57, 0x3b,
//         0xd4, 0xfb, 0x0c, 0xd2, 0x32, 0x52, 0xca, 0x0e, 0xab, 0x98, 0x15, 0x5e, 0x89, 0x96, 0x84,
//         0xc4, 0xf3, 0x7a, 0x82, 0x33, 0xd1, 0xe0, 0x47, 0xaa, 0x1d, 0x2c, 0x83, 0x83, 0x9b, 0x1a,
//         0x31, 0x64, 0x5c, 0xca, 0x1f, 0x6c, 0x18, 0x82, 0x33, 0x97, 0x41, 0x5c, 0x19, 0x4c, 0xc4,
//         0xe4, 0xff, 0x55, 0xd2, 0x75, 0x91, 0xb8, 0xda, 0xc6, 0xb7, 0xbe, 0xd5, 0xc6, 0x67, 0xae,
//         0xbc, 0xef, 0x9e, 0x4a, 0x74, 0xd1, 0x20, 0x77, 0x18, 0xa2, 0xbc, 0xd4, 0x34, 0x55, 0x7e,
//         0x78, 0xa9, 0x3c, 0x1f, 0x66, 0xbb, 0x9a, 0x01, 0xa1, 0xe0, 0x13, 0x52, 0x09, 0x8a, 0x52,
//         0xd8, 0xc6, 0x22, 0xcd, 0xf3, 0xef, 0x1e, 0xa7, 0x6f, 0x48, 0x97, 0xee, 0x31, 0x62, 0xb0,
//         0x47, 0x2b, 0x38, 0x08, 0x51, 0x75, 0x1f, 0x25, 0x2e, 0x2f, 0xc7, 0x25, 0x22, 0xb4, 0xe8,
//         0xee, 0x2b, 0x7e, 0x49, 0x6d, 0xcc, 0x21, 0xef, 0x35, 0x6e, 0x16, 0x31, 0xec, 0xe0, 0xf9,
//         0x82, 0x59, 0xaf, 0x69, 0xcf, 0x58, 0x1a, 0x05, 0x9b, 0xb7, 0xce, 0x5e, 0x23, 0xe7, 0xc1,
//         0x08, 0xb6, 0x89, 0xea, 0x3c, 0xae, 0xfe, 0x7f, 0x47, 0xab, 0x3b, 0x7f, 0x7f, 0x26, 0xb8,
//         0x5b, 0x5b, 0xb2, 0x04, 0x80, 0x56, 0x66, 0xff, 0x92, 0x8c, 0xa1, 0xd8, 0x41, 0x67, 0x18,
//         0xdb, 0x0d, 0x12, 0xb3, 0x5d, 0x94, 0x54, 0x04, 0x68, 0x87, 0xa8, 0xa5, 0x13, 0xc1, 0xc8,
//         0xa5, 0x5c, 0x08, 0xc4, 0x24, 0x10, 0xab, 0x02, 0xb3, 0xc0, 0xbf, 0xa9, 0x72, 0x66, 0xad,
//         0x13, 0x4b, 0xac, 0xef, 0x04, 0x1f, 0x56, 0x63, 0x4a, 0x0a, 0xe7, 0x1e, 0x20, 0x79, 0x03,
//         0xe1, 0xbc, 0xa1, 0xe1, 0x9f, 0x44, 0x92, 0x4b, 0xb5, 0x9b, 0xd3, 0xc6, 0xa8, 0xe9, 0xbb,
//         0x51, 0xfc, 0xff, 0x77, 0x1f, 0xde, 0x18, 0x8c, 0xfd, 0xa1, 0xec, 0x2f, 0xa2, 0xa2, 0x70,
//         0x05, 0x0e, 0x1d, 0xa4, 0xa8, 0x71, 0x39, 0xfd, 0xfc, 0x94, 0xa2, 0xda, 0xb1, 0x27, 0x3b,
//         0xf9, 0x4d, 0x3d, 0x74, 0x69, 0x2e, 0xf6, 0xc1, 0xcd, 0x9c, 0x70, 0x16, 0xcd, 0xb9, 0x98,
//         0xb2, 0x1a, 0x12, 0xc4, 0xa2, 0xff, 0xc0, 0x4f, 0xfb, 0xda, 0xa3, 0x09, 0xc9, 0xb5, 0x75,
//         0x58, 0x90, 0xce, 0x73, 0x73, 0x23, 0x81, 0x00, 0x4b, 0x3c, 0x74, 0xe2, 0x37, 0xed, 0xef,
//         0x84, 0xd0, 0x54, 0xd3, 0x5c, 0x4b, 0x2d, 0x11, 0xbc, 0x0c, 0x96, 0xe2, 0x70, 0x1a, 0xd3,
//         0x0d, 0x5b, 0x05, 0x92, 0x46, 0xbf, 0x33, 0x32, 0xf4, 0xcf, 0x1e, 0x1a, 0x03, 0x32, 0xfa,
//         0xe1, 0xe8, 0x13, 0x02, 0x04, 0xae, 0x56, 0x21, 0x58, 0xb8, 0xdd, 0x3b, 0x24, 0xd5, 0x3f,
//         0x06, 0x8b, 0x79, 0xcb, 0x7d, 0x7e, 0x4c, 0x12, 0x60, 0x16, 0x86, 0xa9, 0xd9, 0xa0, 0xc0,
//         0x58, 0x7e, 0x86, 0x96, 0x05, 0x84, 0x1b, 0x68, 0xe1, 0x71, 0x8e, 0xfd, 0x91, 0x22, 0xf2,
//         0x63, 0x66, 0xc0, 0x73, 0xf3, 0xde, 0xc9, 0x95, 0xbb, 0x86, 0x4c, 0xa2, 0x1d, 0xed, 0x4a,
//         0xbf, 0x84, 0xbb, 0xb4, 0x16, 0x57, 0x17, 0x3c, 0x16, 0xb5, 0x2c, 0x05, 0xcf, 0x47, 0x0c,
//         0x11, 0x65, 0xe4, 0x5c, 0xa8, 0x2c, 0x40, 0x15, 0xec, 0xac, 0xfc, 0x1a, 0xb8, 0x4f, 0x32,
//         0x94, 0xad, 0x41, 0xee, 0x02, 0x55, 0x93, 0x08, 0x6a, 0x96, 0x1a, 0x19, 0xdb, 0xf6, 0xe9,
//         0x32, 0x06, 0xe6, 0x68, 0xc4, 0x6f, 0x10, 0x14, 0x21, 0xfd, 0x0e, 0xd2, 0x5b, 0x01, 0xf2,
//         0xfc, 0xdd, 0xd9, 0x53, 0x9f, 0xf2, 0x09, 0xdd, 0xef, 0x39, 0x94, 0x3a, 0xff, 0xf1, 0x59,
//         0xd7, 0xa0, 0xd6, 0xa3, 0xae, 0xb5, 0x55, 0x6e, 0x2f, 0xf9, 0x19, 0x10, 0x2e, 0x7a, 0x7c,
//         0x8f, 0x90,
//     ];
//     let expected_output = [
//         0xc3, 0xab, 0x58, 0x64, 0x18, 0x90, 0x2a, 0x1d, 0xc5, 0x05, 0xf3, 0x6e, 0x33, 0x3f, 0x7e,
//         0x20, 0xca, 0x30, 0x68, 0x44, 0xef, 0x2c, 0x64, 0x32, 0x8b, 0x96, 0x97, 0xf2, 0x8d, 0xf4,
//         0xc6, 0xe3, 0xc0, 0x3e, 0x08, 0x66, 0x25, 0x13, 0x7b, 0x55, 0x16, 0x41, 0xd3, 0x6b, 0x3e,
//         0x14, 0x49, 0x33, 0x65, 0x84, 0x37, 0x22, 0x70, 0x07, 0x8d, 0x9c, 0x5e, 0x0f, 0x9b, 0x0e,
//         0x87, 0xe8, 0xf3, 0x01, 0x2f, 0x04, 0x0d, 0x7e, 0xe1, 0x28, 0x41, 0x10, 0x73, 0x99, 0xdf,
//         0x42, 0xea, 0xb8, 0x27, 0xf8, 0x71, 0x33, 0x1f, 0x3e, 0xda, 0xf8, 0xcd, 0x3c, 0x03, 0x2b,
//         0x0d, 0x08, 0xc0, 0x51, 0x63, 0xaf, 0xe6, 0x2c, 0xbb, 0xbc, 0x71, 0xdd, 0x33, 0x2f, 0x48,
//         0xd6, 0x5f, 0xb1, 0x93, 0xf5, 0xfe, 0xa5, 0x14, 0x77, 0x60, 0xb7, 0xb3, 0x62, 0x84, 0x86,
//         0xb1, 0x65, 0x62, 0xfc, 0xed, 0x13, 0xd3, 0x5c, 0x1a, 0xf0, 0x8c, 0x18, 0xca, 0x6a, 0xe6,
//         0x2e, 0xe5, 0x38, 0x5c, 0xe6, 0xa9, 0x68, 0x79, 0x90, 0xca, 0x76, 0x9d, 0xd4, 0xa6, 0xf1,
//         0x46, 0xcb, 0xd7, 0x4b, 0xeb, 0x17, 0x92, 0x5f, 0x31, 0xad, 0x02, 0xc5, 0xeb, 0xcb, 0xbe,
//         0xe5, 0x6b, 0x1a, 0x19, 0xb8, 0xea, 0x8d, 0xd1, 0x69, 0x87, 0xbb, 0x6c, 0x7c, 0xcd, 0x2d,
//         0x75, 0xb4, 0x86, 0x40, 0x67, 0x11, 0x6c, 0x53, 0x05, 0xcf, 0x92, 0x02, 0x7b, 0x95, 0x42,
//         0x22, 0xd4, 0x5e, 0x9b, 0x65, 0xef, 0x1b, 0xf0, 0xa5, 0x11, 0x93, 0x58, 0xa7, 0xcd, 0x50,
//         0x05, 0xd0, 0xf8, 0x9b, 0x63, 0x0b, 0x69, 0x4d, 0x4a, 0x04, 0x80, 0xc3, 0x22, 0x1b, 0x88,
//         0x84, 0x6f, 0x6f, 0x3f, 0x23, 0x4b, 0x16, 0xe2, 0x3c, 0x74, 0x00, 0x15, 0x69, 0xb7, 0x76,
//         0x93, 0xe6, 0xa7, 0x94, 0x06, 0x51, 0xff, 0xa1, 0xd4, 0xc6, 0x31, 0x20, 0x22, 0xfe, 0x43,
//         0x7d, 0x93, 0x3c, 0x4b, 0x53, 0x54, 0x86, 0x1d, 0xa1, 0x5d, 0xea, 0x29, 0xcb, 0x38, 0xb2,
//         0x87, 0xda, 0xc9, 0xec, 0xac, 0x89, 0xea, 0x11, 0xa6, 0xa7, 0xe1, 0x44, 0x1e, 0xb6, 0x52,
//         0xb9, 0xde, 0x10, 0xdc, 0xdd, 0xd1, 0x9c, 0x28, 0xb6, 0x91, 0x48, 0x78, 0x57, 0x60, 0x19,
//         0x5c, 0xc2, 0xaa, 0x02, 0x87, 0x77, 0x17, 0xb2, 0x8a, 0x82, 0xaa, 0x5c, 0x78, 0xc1, 0x2a,
//         0xd8, 0x21, 0x8e, 0x6a, 0xb8, 0xb5, 0x60, 0x4b, 0x1b, 0x66, 0x48, 0x52, 0x9b, 0xba, 0x62,
//         0xfd, 0x93, 0x30, 0x09, 0x65, 0x54, 0x76, 0xde, 0x8e, 0x4e, 0xfa, 0x68, 0xcf, 0xd7, 0xcf,
//         0x20, 0x78, 0x06, 0x5a, 0xc8, 0xa0, 0x1f, 0x93, 0x1e, 0x90, 0x6a, 0xd0, 0x38, 0x51, 0x1c,
//         0x1e, 0x16, 0xf0, 0x5b, 0x03, 0x47, 0xaf, 0xe2, 0x73, 0x5f, 0x1a, 0xaf, 0xe7, 0x38, 0xff,
//         0x93, 0xf3, 0x8f, 0x55, 0xcd, 0x60, 0x41, 0x6a, 0x3d, 0x8b, 0x9c, 0xc0, 0x68, 0xa4, 0xe1,
//         0x0a, 0xcd, 0x85, 0x2f, 0x24, 0x70, 0x36, 0x75, 0x47, 0x95, 0xfa, 0x86, 0x58, 0xa6, 0xf5,
//         0x66, 0x81, 0x32, 0xac, 0x25, 0xa2, 0x6c, 0x1b, 0xa3, 0x17, 0x62, 0x73, 0x03, 0x3f, 0xb2,
//         0x60, 0x10, 0x94, 0x9d, 0xf5, 0x97, 0xeb, 0x44, 0x0e, 0xf9, 0xf0, 0xfb, 0xe2, 0x1f, 0x64,
//         0x47, 0xb7, 0x32, 0xec, 0xb0, 0x10, 0x45, 0x17, 0x52, 0x8a, 0xda, 0xd1, 0x73, 0x10, 0x73,
//         0xde, 0x7a, 0x6d, 0xa8, 0x67, 0xb2, 0x9b, 0xd4, 0x2b, 0xa8, 0xcd, 0x0d, 0x10, 0x59, 0xbf,
//         0xa8, 0x2e, 0xb5, 0x90, 0x09, 0x79, 0x81, 0xb5, 0x76, 0xa8, 0x4a, 0xf7, 0xb1, 0x68, 0x72,
//         0x28, 0xa8, 0xd7, 0xc5, 0xc5, 0xd8, 0x20, 0xda, 0xc8, 0x7a, 0xb4, 0x96, 0x6d, 0x13, 0xc5,
//         0x9f, 0x74, 0x46, 0xc9, 0xca, 0x75, 0x22, 0xc4, 0x62, 0x9e, 0xc7, 0xe7, 0xae, 0x17, 0xbb,
//         0xde, 0x6e,
//     ];
//     let expected_param_12 = 0x08;
//     let output = chacha.update(plaintext);
//     assert_eq!(chacha.params[12], expected_param_12);
//     for i in 0..expected_output.len() {
//         assert_eq!(output[i], expected_output[i]);
//     }
// }
